<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="790" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="773.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="773.00"> </text><svg id="frames" x="10" width="1180" total_samples="5540594300"><g><title>[ld-linux-x86-64.so.2] (563,795 samples, 0.01%)</title><rect x="0.0000%" y="677" width="0.0102%" height="15" fill="rgb(227,0,7)" fg:x="722" fg:w="563795"/><text x="0.2500%" y="687.50"></text></g><g><title>[ld-linux-x86-64.so.2] (563,795 samples, 0.01%)</title><rect x="0.0000%" y="661" width="0.0102%" height="15" fill="rgb(217,0,24)" fg:x="722" fg:w="563795"/><text x="0.2500%" y="671.50"></text></g><g><title>[ld-linux-x86-64.so.2] (571,414 samples, 0.01%)</title><rect x="0.0000%" y="693" width="0.0103%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="571414"/><text x="0.2500%" y="703.50"></text></g><g><title>[ld-linux-x86-64.so.2] (571,415 samples, 0.01%)</title><rect x="0.0000%" y="709" width="0.0103%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="571415"/><text x="0.2500%" y="719.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,207,956 samples, 0.08%)</title><rect x="0.5152%" y="421" width="0.0759%" height="15" fill="rgb(208,68,35)" fg:x="28544298" fg:w="4207956"/><text x="0.7652%" y="431.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (4,207,956 samples, 0.08%)</title><rect x="0.5152%" y="405" width="0.0759%" height="15" fill="rgb(232,128,0)" fg:x="28544298" fg:w="4207956"/><text x="0.7652%" y="415.50"></text></g><g><title>alloc::alloc::exchange_malloc (77,976,031 samples, 1.41%)</title><rect x="0.5911%" y="421" width="1.4074%" height="15" fill="rgb(207,160,47)" fg:x="32752254" fg:w="77976031"/><text x="0.8411%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (77,976,031 samples, 1.41%)</title><rect x="0.5911%" y="405" width="1.4074%" height="15" fill="rgb(228,23,34)" fg:x="32752254" fg:w="77976031"/><text x="0.8411%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (77,976,031 samples, 1.41%)</title><rect x="0.5911%" y="389" width="1.4074%" height="15" fill="rgb(218,30,26)" fg:x="32752254" fg:w="77976031"/><text x="0.8411%" y="399.50"></text></g><g><title>alloc::alloc::alloc (77,976,031 samples, 1.41%)</title><rect x="0.5911%" y="373" width="1.4074%" height="15" fill="rgb(220,122,19)" fg:x="32752254" fg:w="77976031"/><text x="0.8411%" y="383.50"></text></g><g><title>malloc (77,976,031 samples, 1.41%)</title><rect x="0.5911%" y="357" width="1.4074%" height="15" fill="rgb(250,228,42)" fg:x="32752254" fg:w="77976031"/><text x="0.8411%" y="367.50"></text></g><g><title>[libc.so.6] (59,827,062 samples, 1.08%)</title><rect x="0.9187%" y="341" width="1.0798%" height="15" fill="rgb(240,193,28)" fg:x="50901223" fg:w="59827062"/><text x="1.1687%" y="351.50"></text></g><g><title>[unknown] (10,861,773 samples, 0.20%)</title><rect x="1.8025%" y="325" width="0.1960%" height="15" fill="rgb(216,20,37)" fg:x="99866512" fg:w="10861773"/><text x="2.0525%" y="335.50"></text></g><g><title>[unknown] (3,632,718 samples, 0.07%)</title><rect x="1.9329%" y="309" width="0.0656%" height="15" fill="rgb(206,188,39)" fg:x="107095567" fg:w="3632718"/><text x="2.1829%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (22,453,541 samples, 0.41%)</title><rect x="1.9985%" y="421" width="0.4053%" height="15" fill="rgb(217,207,13)" fg:x="110728285" fg:w="22453541"/><text x="2.2485%" y="431.50"></text></g><g><title>core::ptr::write (22,453,541 samples, 0.41%)</title><rect x="1.9985%" y="405" width="0.4053%" height="15" fill="rgb(231,73,38)" fg:x="110728285" fg:w="22453541"/><text x="2.2485%" y="415.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4,203,428 samples, 0.08%)</title><rect x="2.4037%" y="421" width="0.0759%" height="15" fill="rgb(225,20,46)" fg:x="133181826" fg:w="4203428"/><text x="2.6537%" y="431.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4,203,428 samples, 0.08%)</title><rect x="2.4037%" y="405" width="0.0759%" height="15" fill="rgb(210,31,41)" fg:x="133181826" fg:w="4203428"/><text x="2.6537%" y="415.50"></text></g><g><title>__rdl_dealloc (8,370,158 samples, 0.15%)</title><rect x="3.3821%" y="245" width="0.1511%" height="15" fill="rgb(221,200,47)" fg:x="187388461" fg:w="8370158"/><text x="3.6321%" y="255.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (4,187,607 samples, 0.08%)</title><rect x="3.4576%" y="229" width="0.0756%" height="15" fill="rgb(226,26,5)" fg:x="191571012" fg:w="4187607"/><text x="3.7076%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (95,811,200 samples, 1.73%)</title><rect x="2.6300%" y="341" width="1.7293%" height="15" fill="rgb(249,33,26)" fg:x="145716784" fg:w="95811200"/><text x="2.8800%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::boxed::Box&lt;dyn kleurenwiezen::players::Player&gt;]&gt; (95,811,200 samples, 1.73%)</title><rect x="2.6300%" y="325" width="1.7293%" height="15" fill="rgb(235,183,28)" fg:x="145716784" fg:w="95811200"/><text x="2.8800%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn kleurenwiezen::players::Player&gt;&gt; (87,473,143 samples, 1.58%)</title><rect x="2.7805%" y="309" width="1.5788%" height="15" fill="rgb(221,5,38)" fg:x="154054841" fg:w="87473143"/><text x="3.0305%" y="319.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (66,652,114 samples, 1.20%)</title><rect x="3.1563%" y="293" width="1.2030%" height="15" fill="rgb(247,18,42)" fg:x="174875870" fg:w="66652114"/><text x="3.4063%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (58,324,463 samples, 1.05%)</title><rect x="3.3066%" y="277" width="1.0527%" height="15" fill="rgb(241,131,45)" fg:x="183203521" fg:w="58324463"/><text x="3.5566%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (58,324,463 samples, 1.05%)</title><rect x="3.3066%" y="261" width="1.0527%" height="15" fill="rgb(249,31,29)" fg:x="183203521" fg:w="58324463"/><text x="3.5566%" y="271.50"></text></g><g><title>cfree (45,769,365 samples, 0.83%)</title><rect x="3.5332%" y="245" width="0.8261%" height="15" fill="rgb(225,111,53)" fg:x="195758619" fg:w="45769365"/><text x="3.7832%" y="255.50"></text></g><g><title>[libc.so.6] (16,648,242 samples, 0.30%)</title><rect x="4.0588%" y="229" width="0.3005%" height="15" fill="rgb(238,160,17)" fg:x="224879742" fg:w="16648242"/><text x="4.3088%" y="239.50"></text></g><g><title>__rust_dealloc (4,168,495 samples, 0.08%)</title><rect x="4.4343%" y="261" width="0.0752%" height="15" fill="rgb(214,148,48)" fg:x="245685226" fg:w="4168495"/><text x="4.6843%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kleurenwiezen::game::Game&gt;&gt; (137,416,371 samples, 2.48%)</title><rect x="2.4796%" y="421" width="2.4802%" height="15" fill="rgb(232,36,49)" fg:x="137385254" fg:w="137416371"/><text x="2.7296%" y="431.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (137,416,371 samples, 2.48%)</title><rect x="2.4796%" y="405" width="2.4802%" height="15" fill="rgb(209,103,24)" fg:x="137385254" fg:w="137416371"/><text x="2.7296%" y="415.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;[kleurenwiezen::game::Game]&gt; (137,416,371 samples, 2.48%)</title><rect x="2.4796%" y="389" width="2.4802%" height="15" fill="rgb(229,88,8)" fg:x="137385254" fg:w="137416371"/><text x="2.7296%" y="399.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;kleurenwiezen::game::Game&gt; (137,416,371 samples, 2.48%)</title><rect x="2.4796%" y="373" width="2.4802%" height="15" fill="rgb(213,181,19)" fg:x="137385254" fg:w="137416371"/><text x="2.7296%" y="383.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::boxed::Box&lt;dyn kleurenwiezen::players::Player&gt;&gt;&gt; (129,084,841 samples, 2.33%)</title><rect x="2.6300%" y="357" width="2.3298%" height="15" fill="rgb(254,191,54)" fg:x="145716784" fg:w="129084841"/><text x="2.8800%" y="367.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::boxed::Box&lt;dyn kleurenwiezen::players::Player&gt;&gt;&gt; (33,273,641 samples, 0.60%)</title><rect x="4.3592%" y="341" width="0.6005%" height="15" fill="rgb(241,83,37)" fg:x="241527984" fg:w="33273641"/><text x="4.6092%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33,273,641 samples, 0.60%)</title><rect x="4.3592%" y="325" width="0.6005%" height="15" fill="rgb(233,36,39)" fg:x="241527984" fg:w="33273641"/><text x="4.6092%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (29,116,399 samples, 0.53%)</title><rect x="4.4343%" y="309" width="0.5255%" height="15" fill="rgb(226,3,54)" fg:x="245685226" fg:w="29116399"/><text x="4.6843%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (29,116,399 samples, 0.53%)</title><rect x="4.4343%" y="293" width="0.5255%" height="15" fill="rgb(245,192,40)" fg:x="245685226" fg:w="29116399"/><text x="4.6843%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (29,116,399 samples, 0.53%)</title><rect x="4.4343%" y="277" width="0.5255%" height="15" fill="rgb(238,167,29)" fg:x="245685226" fg:w="29116399"/><text x="4.6843%" y="287.50"></text></g><g><title>cfree (24,947,904 samples, 0.45%)</title><rect x="4.5095%" y="261" width="0.4503%" height="15" fill="rgb(232,182,51)" fg:x="249853721" fg:w="24947904"/><text x="4.7595%" y="271.50"></text></g><g><title>&lt;kleurenwiezen::game::Game as core::default::Default&gt;::default (21,593,993 samples, 0.39%)</title><rect x="5.1240%" y="405" width="0.3897%" height="15" fill="rgb(231,60,39)" fg:x="283902004" fg:w="21593993"/><text x="5.3740%" y="415.50"></text></g><g><title>rand::rngs::thread::thread_rng (3,638,815 samples, 0.07%)</title><rect x="5.4481%" y="389" width="0.0657%" height="15" fill="rgb(208,69,12)" fg:x="301857182" fg:w="3638815"/><text x="5.6981%" y="399.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3,638,815 samples, 0.07%)</title><rect x="5.4481%" y="373" width="0.0657%" height="15" fill="rgb(235,93,37)" fg:x="301857182" fg:w="3638815"/><text x="5.6981%" y="383.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3,638,815 samples, 0.07%)</title><rect x="5.4481%" y="357" width="0.0657%" height="15" fill="rgb(213,116,39)" fg:x="301857182" fg:w="3638815"/><text x="5.6981%" y="367.50"></text></g><g><title>rand::rngs::thread::thread_rng::_{{closure}} (3,638,815 samples, 0.07%)</title><rect x="5.4481%" y="341" width="0.0657%" height="15" fill="rgb(222,207,29)" fg:x="301857182" fg:w="3638815"/><text x="5.6981%" y="351.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::clone::Clone&gt;::clone (3,638,815 samples, 0.07%)</title><rect x="5.4481%" y="325" width="0.0657%" height="15" fill="rgb(206,96,30)" fg:x="301857182" fg:w="3638815"/><text x="5.6981%" y="335.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (3,638,815 samples, 0.07%)</title><rect x="5.4481%" y="309" width="0.0657%" height="15" fill="rgb(218,138,4)" fg:x="301857182" fg:w="3638815"/><text x="5.6981%" y="319.50"></text></g><g><title>core::intrinsics::unlikely (3,638,815 samples, 0.07%)</title><rect x="5.4481%" y="293" width="0.0657%" height="15" fill="rgb(250,191,14)" fg:x="301857182" fg:w="3638815"/><text x="5.6981%" y="303.50"></text></g><g><title>&lt;kleurenwiezen::players::greedy_player::GreedyPlayer as kleurenwiezen::players::Player&gt;::set_index (14,432,529 samples, 0.26%)</title><rect x="5.5138%" y="405" width="0.2605%" height="15" fill="rgb(239,60,40)" fg:x="305495997" fg:w="14432529"/><text x="5.7638%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::boxed::Box&lt;dyn kleurenwiezen::players::Player&gt;&gt;&gt; (18,126,743 samples, 0.33%)</title><rect x="5.7743%" y="405" width="0.3272%" height="15" fill="rgb(206,27,48)" fg:x="319928526" fg:w="18126743"/><text x="6.0243%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18,126,743 samples, 0.33%)</title><rect x="5.7743%" y="389" width="0.3272%" height="15" fill="rgb(225,35,8)" fg:x="319928526" fg:w="18126743"/><text x="6.0243%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (37,835,863 samples, 0.68%)</title><rect x="7.5630%" y="373" width="0.6829%" height="15" fill="rgb(250,213,24)" fg:x="419032782" fg:w="37835863"/><text x="7.8130%" y="383.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (37,835,863 samples, 0.68%)</title><rect x="7.5630%" y="357" width="0.6829%" height="15" fill="rgb(247,123,22)" fg:x="419032782" fg:w="37835863"/><text x="7.8130%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (37,835,863 samples, 0.68%)</title><rect x="7.5630%" y="341" width="0.6829%" height="15" fill="rgb(231,138,38)" fg:x="419032782" fg:w="37835863"/><text x="7.8130%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (37,835,863 samples, 0.68%)</title><rect x="7.5630%" y="325" width="0.6829%" height="15" fill="rgb(231,145,46)" fg:x="419032782" fg:w="37835863"/><text x="7.8130%" y="335.50"></text></g><g><title>core::intrinsics::copy (179,800,002 samples, 3.25%)</title><rect x="8.8954%" y="341" width="3.2451%" height="15" fill="rgb(251,118,11)" fg:x="492857340" fg:w="179800002"/><text x="9.1454%" y="351.50">cor..</text></g><g><title>core::slice::&lt;impl [T]&gt;::swap (232,101,615 samples, 4.19%)</title><rect x="8.2458%" y="373" width="4.1891%" height="15" fill="rgb(217,147,25)" fg:x="456868645" fg:w="232101615"/><text x="8.4958%" y="383.50">core:..</text></g><g><title>core::ptr::swap (196,112,920 samples, 3.54%)</title><rect x="8.8954%" y="357" width="3.5396%" height="15" fill="rgb(247,81,37)" fg:x="492857340" fg:w="196112920"/><text x="9.1454%" y="367.50">cor..</text></g><g><title>core::intrinsics::copy_nonoverlapping (16,312,918 samples, 0.29%)</title><rect x="12.1405%" y="341" width="0.2944%" height="15" fill="rgb(209,12,38)" fg:x="672657342" fg:w="16312918"/><text x="12.3905%" y="351.50"></text></g><g><title>&lt;u32 as rand::distributions::utils::WideningMultiply&gt;::wmul (57,811,863 samples, 1.04%)</title><rect x="16.4008%" y="293" width="1.0434%" height="15" fill="rgb(227,1,9)" fg:x="908700371" fg:w="57811863"/><text x="16.6508%" y="303.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (3,651,078 samples, 0.07%)</title><rect x="17.4442%" y="293" width="0.0659%" height="15" fill="rgb(248,47,43)" fg:x="966512234" fg:w="3651078"/><text x="17.6942%" y="303.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::u32x4_sse2&lt;S3,S4,NI&gt; as core::ops::arith::Add&gt;::add (10,864,797 samples, 0.20%)</title><rect x="26.9378%" y="101" width="0.1961%" height="15" fill="rgb(221,10,30)" fg:x="1492515179" fg:w="10864797"/><text x="27.1878%" y="111.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_add_epi32 (10,864,797 samples, 0.20%)</title><rect x="26.9378%" y="85" width="0.1961%" height="15" fill="rgb(210,229,1)" fg:x="1492515179" fg:w="10864797"/><text x="27.1878%" y="95.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::u32x4_sse2&lt;S3,S4,NI&gt; as ppv_lite86::types::StoreBytes&gt;::write_le (3,659,894 samples, 0.07%)</title><rect x="27.1339%" y="101" width="0.0661%" height="15" fill="rgb(222,148,37)" fg:x="1503379976" fg:w="3659894"/><text x="27.3839%" y="111.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_storeu_si128 (3,659,894 samples, 0.07%)</title><rect x="27.1339%" y="85" width="0.0661%" height="15" fill="rgb(234,67,33)" fg:x="1503379976" fg:w="3659894"/><text x="27.3839%" y="95.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_unaligned (3,659,894 samples, 0.07%)</title><rect x="27.1339%" y="69" width="0.0661%" height="15" fill="rgb(247,98,35)" fg:x="1503379976" fg:w="3659894"/><text x="27.3839%" y="79.50"></text></g><g><title>core::ptr::write_unaligned (3,659,894 samples, 0.07%)</title><rect x="27.1339%" y="53" width="0.0661%" height="15" fill="rgb(247,138,52)" fg:x="1503379976" fg:w="3659894"/><text x="27.3839%" y="63.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3,659,894 samples, 0.07%)</title><rect x="27.1339%" y="37" width="0.0661%" height="15" fill="rgb(213,79,30)" fg:x="1503379976" fg:w="3659894"/><text x="27.3839%" y="47.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (3,542,027 samples, 0.06%)</title><rect x="27.2000%" y="101" width="0.0639%" height="15" fill="rgb(246,177,23)" fg:x="1507039870" fg:w="3542027"/><text x="27.4500%" y="111.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3,542,027 samples, 0.06%)</title><rect x="27.2000%" y="85" width="0.0639%" height="15" fill="rgb(230,62,27)" fg:x="1507039870" fg:w="3542027"/><text x="27.4500%" y="95.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (3,542,027 samples, 0.06%)</title><rect x="27.2000%" y="69" width="0.0639%" height="15" fill="rgb(216,154,8)" fg:x="1507039870" fg:w="3542027"/><text x="27.4500%" y="79.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (7,839,444 samples, 0.14%)</title><rect x="27.2639%" y="101" width="0.1415%" height="15" fill="rgb(244,35,45)" fg:x="1510581897" fg:w="7839444"/><text x="27.5139%" y="111.50"></text></g><g><title>ppv_lite86::x86_64::sse2::avx2::_&lt;impl ppv_lite86::types::MultiLane&lt;[ppv_lite86::x86_64::sse2::u32x4_sse2&lt;ppv_lite86::x86_64::YesS3,ppv_lite86::x86_64::YesS4,NI&gt;: 4]&gt; for ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt;,ppv_lite86::x86_64::sse2::G0&gt;&gt;::from_lanes (3,658,560 samples, 0.07%)</title><rect x="27.4054%" y="101" width="0.0660%" height="15" fill="rgb(251,115,12)" fg:x="1518421341" fg:w="3658560"/><text x="27.6554%" y="111.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::MultiLane&lt;[ppv_lite86::x86_64::sse2::u32x4_sse2&lt;ppv_lite86::x86_64::YesS3,ppv_lite86::x86_64::YesS4,NI&gt;: 2]&gt;&gt;::from_lanes (3,658,560 samples, 0.07%)</title><rect x="27.4054%" y="85" width="0.0660%" height="15" fill="rgb(240,54,50)" fg:x="1518421341" fg:w="3658560"/><text x="27.6554%" y="95.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_setr_m128i (3,658,560 samples, 0.07%)</title><rect x="27.4054%" y="69" width="0.0660%" height="15" fill="rgb(233,84,52)" fg:x="1518421341" fg:w="3658560"/><text x="27.6554%" y="79.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set_m128i (3,658,560 samples, 0.07%)</title><rect x="27.4054%" y="53" width="0.0660%" height="15" fill="rgb(207,117,47)" fg:x="1518421341" fg:w="3658560"/><text x="27.6554%" y="63.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set_m128 (3,658,560 samples, 0.07%)</title><rect x="27.4054%" y="37" width="0.0660%" height="15" fill="rgb(249,43,39)" fg:x="1518421341" fg:w="3658560"/><text x="27.6554%" y="47.50"></text></g><g><title>rand_chacha::guts::diagonalize (7,272,046 samples, 0.13%)</title><rect x="27.4714%" y="101" width="0.1313%" height="15" fill="rgb(209,38,44)" fg:x="1522079901" fg:w="7272046"/><text x="27.7214%" y="111.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words3012 (7,272,046 samples, 0.13%)</title><rect x="27.4714%" y="85" width="0.1313%" height="15" fill="rgb(236,212,23)" fg:x="1522079901" fg:w="7272046"/><text x="27.7214%" y="95.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words3012 (7,272,046 samples, 0.13%)</title><rect x="27.4714%" y="69" width="0.1313%" height="15" fill="rgb(242,79,21)" fg:x="1522079901" fg:w="7272046"/><text x="27.7214%" y="79.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (7,272,046 samples, 0.13%)</title><rect x="27.4714%" y="53" width="0.1313%" height="15" fill="rgb(211,96,35)" fg:x="1522079901" fg:w="7272046"/><text x="27.7214%" y="63.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::arith::AddAssign&gt;::add_assign (28,333,768 samples, 0.51%)</title><rect x="27.6027%" y="85" width="0.5114%" height="15" fill="rgb(253,215,40)" fg:x="1529351947" fg:w="28333768"/><text x="27.8527%" y="95.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::AddAssign&gt;::add_assign (28,333,768 samples, 0.51%)</title><rect x="27.6027%" y="69" width="0.5114%" height="15" fill="rgb(211,81,21)" fg:x="1529351947" fg:w="28333768"/><text x="27.8527%" y="79.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::Add&gt;::add (28,333,768 samples, 0.51%)</title><rect x="27.6027%" y="53" width="0.5114%" height="15" fill="rgb(208,190,38)" fg:x="1529351947" fg:w="28333768"/><text x="27.8527%" y="63.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (28,333,768 samples, 0.51%)</title><rect x="27.6027%" y="37" width="0.5114%" height="15" fill="rgb(235,213,38)" fg:x="1529351947" fg:w="28333768"/><text x="27.8527%" y="47.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::bit::BitXor&gt;::bitxor (46,506,265 samples, 0.84%)</title><rect x="28.1141%" y="85" width="0.8394%" height="15" fill="rgb(237,122,38)" fg:x="1557685715" fg:w="46506265"/><text x="28.3641%" y="95.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::bit::BitXor&gt;::bitxor (46,506,265 samples, 0.84%)</title><rect x="28.1141%" y="69" width="0.8394%" height="15" fill="rgb(244,218,35)" fg:x="1557685715" fg:w="46506265"/><text x="28.3641%" y="79.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_xor_si256 (46,506,265 samples, 0.84%)</title><rect x="28.1141%" y="53" width="0.8394%" height="15" fill="rgb(240,68,47)" fg:x="1557685715" fg:w="46506265"/><text x="28.3641%" y="63.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (54,669,894 samples, 0.99%)</title><rect x="28.9534%" y="85" width="0.9867%" height="15" fill="rgb(210,16,53)" fg:x="1604191980" fg:w="54669894"/><text x="29.2034%" y="95.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (54,669,894 samples, 0.99%)</title><rect x="28.9534%" y="69" width="0.9867%" height="15" fill="rgb(235,124,12)" fg:x="1604191980" fg:w="54669894"/><text x="29.2034%" y="79.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (54,669,894 samples, 0.99%)</title><rect x="28.9534%" y="53" width="0.9867%" height="15" fill="rgb(224,169,11)" fg:x="1604191980" fg:w="54669894"/><text x="29.2034%" y="63.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (96,144,706 samples, 1.74%)</title><rect x="29.9401%" y="53" width="1.7353%" height="15" fill="rgb(250,166,2)" fg:x="1658861874" fg:w="96144706"/><text x="30.1901%" y="63.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (114,069,463 samples, 2.06%)</title><rect x="29.9401%" y="85" width="2.0588%" height="15" fill="rgb(242,216,29)" fg:x="1658861874" fg:w="114069463"/><text x="30.1901%" y="95.50">&lt;..</text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (114,069,463 samples, 2.06%)</title><rect x="29.9401%" y="69" width="2.0588%" height="15" fill="rgb(230,116,27)" fg:x="1658861874" fg:w="114069463"/><text x="30.1901%" y="79.50">&lt;..</text></g><g><title>core::core_arch::x86::avx2::_mm256_srli_epi32 (17,924,757 samples, 0.32%)</title><rect x="31.6754%" y="53" width="0.3235%" height="15" fill="rgb(228,99,48)" fg:x="1755006580" fg:w="17924757"/><text x="31.9254%" y="63.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (19,847,336 samples, 0.36%)</title><rect x="31.9989%" y="85" width="0.3582%" height="15" fill="rgb(253,11,6)" fg:x="1772931337" fg:w="19847336"/><text x="32.2489%" y="95.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (19,847,336 samples, 0.36%)</title><rect x="31.9989%" y="69" width="0.3582%" height="15" fill="rgb(247,143,39)" fg:x="1772931337" fg:w="19847336"/><text x="32.2489%" y="79.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (19,847,336 samples, 0.36%)</title><rect x="31.9989%" y="53" width="0.3582%" height="15" fill="rgb(236,97,10)" fg:x="1772931337" fg:w="19847336"/><text x="32.2489%" y="63.50"></text></g><g><title>rand_chacha::guts::round (364,669,869 samples, 6.58%)</title><rect x="27.6027%" y="101" width="6.5818%" height="15" fill="rgb(233,208,19)" fg:x="1529351947" fg:w="364669869"/><text x="27.8527%" y="111.50">rand_chac..</text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (101,243,143 samples, 1.83%)</title><rect x="32.3572%" y="85" width="1.8273%" height="15" fill="rgb(216,164,2)" fg:x="1792778673" fg:w="101243143"/><text x="32.6072%" y="95.50">&lt;..</text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (101,243,143 samples, 1.83%)</title><rect x="32.3572%" y="69" width="1.8273%" height="15" fill="rgb(220,129,5)" fg:x="1792778673" fg:w="101243143"/><text x="32.6072%" y="79.50">&lt;..</text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (101,243,143 samples, 1.83%)</title><rect x="32.3572%" y="53" width="1.8273%" height="15" fill="rgb(242,17,10)" fg:x="1792778673" fg:w="101243143"/><text x="32.6072%" y="63.50">c..</text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words1230 (3,529,571 samples, 0.06%)</title><rect x="34.1845%" y="85" width="0.0637%" height="15" fill="rgb(242,107,0)" fg:x="1894021816" fg:w="3529571"/><text x="34.4345%" y="95.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words1230 (3,529,571 samples, 0.06%)</title><rect x="34.1845%" y="69" width="0.0637%" height="15" fill="rgb(251,28,31)" fg:x="1894021816" fg:w="3529571"/><text x="34.4345%" y="79.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (3,529,571 samples, 0.06%)</title><rect x="34.1845%" y="53" width="0.0637%" height="15" fill="rgb(233,223,10)" fg:x="1894021816" fg:w="3529571"/><text x="34.4345%" y="63.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (7,232,967 samples, 0.13%)</title><rect x="34.2482%" y="85" width="0.1305%" height="15" fill="rgb(215,21,27)" fg:x="1897551387" fg:w="7232967"/><text x="34.4982%" y="95.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (7,232,967 samples, 0.13%)</title><rect x="34.2482%" y="69" width="0.1305%" height="15" fill="rgb(232,23,21)" fg:x="1897551387" fg:w="7232967"/><text x="34.4982%" y="79.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (7,232,967 samples, 0.13%)</title><rect x="34.2482%" y="53" width="0.1305%" height="15" fill="rgb(244,5,23)" fg:x="1897551387" fg:w="7232967"/><text x="34.4982%" y="63.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (433,891,707 samples, 7.83%)</title><rect x="26.6786%" y="149" width="7.8311%" height="15" fill="rgb(226,81,46)" fg:x="1478155128" fg:w="433891707"/><text x="26.9286%" y="159.50">rand_chacha..</text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (430,287,684 samples, 7.77%)</title><rect x="26.7437%" y="133" width="7.7661%" height="15" fill="rgb(247,70,30)" fg:x="1481759151" fg:w="430287684"/><text x="26.9937%" y="143.50">rand_chacha..</text></g><g><title>rand_chacha::guts::refill_wide_impl (430,287,684 samples, 7.77%)</title><rect x="26.7437%" y="117" width="7.7661%" height="15" fill="rgb(212,68,19)" fg:x="1481759151" fg:w="430287684"/><text x="26.9937%" y="127.50">rand_chacha..</text></g><g><title>rand_chacha::guts::undiagonalize (18,025,019 samples, 0.33%)</title><rect x="34.1845%" y="101" width="0.3253%" height="15" fill="rgb(240,187,13)" fg:x="1894021816" fg:w="18025019"/><text x="34.4345%" y="111.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words3012 (7,262,481 samples, 0.13%)</title><rect x="34.3787%" y="85" width="0.1311%" height="15" fill="rgb(223,113,26)" fg:x="1904784354" fg:w="7262481"/><text x="34.6287%" y="95.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words3012 (7,262,481 samples, 0.13%)</title><rect x="34.3787%" y="69" width="0.1311%" height="15" fill="rgb(206,192,2)" fg:x="1904784354" fg:w="7262481"/><text x="34.6287%" y="79.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (7,262,481 samples, 0.13%)</title><rect x="34.3787%" y="53" width="0.1311%" height="15" fill="rgb(241,108,4)" fg:x="1904784354" fg:w="7262481"/><text x="34.6287%" y="63.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (437,564,541 samples, 7.90%)</title><rect x="26.6786%" y="181" width="7.8974%" height="15" fill="rgb(247,173,49)" fg:x="1478155128" fg:w="437564541"/><text x="26.9286%" y="191.50">&lt;rand_chach..</text></g><g><title>rand_chacha::guts::ChaCha::refill4 (437,564,541 samples, 7.90%)</title><rect x="26.6786%" y="165" width="7.8974%" height="15" fill="rgb(224,114,35)" fg:x="1478155128" fg:w="437564541"/><text x="26.9286%" y="175.50">rand_chacha..</text></g><g><title>rand_chacha::guts::refill_wide (3,672,834 samples, 0.07%)</title><rect x="34.5098%" y="149" width="0.0663%" height="15" fill="rgb(245,159,27)" fg:x="1912046835" fg:w="3672834"/><text x="34.7598%" y="159.50"></text></g><g><title>std_detect::detect::arch::x86::__is_feature_detected::avx2 (3,672,834 samples, 0.07%)</title><rect x="34.5098%" y="133" width="0.0663%" height="15" fill="rgb(245,172,44)" fg:x="1912046835" fg:w="3672834"/><text x="34.7598%" y="143.50"></text></g><g><title>std_detect::detect::check_for (3,672,834 samples, 0.07%)</title><rect x="34.5098%" y="117" width="0.0663%" height="15" fill="rgb(236,23,11)" fg:x="1912046835" fg:w="3672834"/><text x="34.7598%" y="127.50"></text></g><g><title>std_detect::detect::cache::test (3,672,834 samples, 0.07%)</title><rect x="34.5098%" y="101" width="0.0663%" height="15" fill="rgb(205,117,38)" fg:x="1912046835" fg:w="3672834"/><text x="34.7598%" y="111.50"></text></g><g><title>std_detect::detect::cache::Cache::test (3,672,834 samples, 0.07%)</title><rect x="34.5098%" y="85" width="0.0663%" height="15" fill="rgb(237,72,25)" fg:x="1912046835" fg:w="3672834"/><text x="34.7598%" y="95.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (3,672,834 samples, 0.07%)</title><rect x="34.5098%" y="69" width="0.0663%" height="15" fill="rgb(244,70,9)" fg:x="1912046835" fg:w="3672834"/><text x="34.7598%" y="79.50"></text></g><g><title>core::sync::atomic::atomic_load (3,672,834 samples, 0.07%)</title><rect x="34.5098%" y="53" width="0.0663%" height="15" fill="rgb(217,125,39)" fg:x="1912046835" fg:w="3672834"/><text x="34.7598%" y="63.50"></text></g><g><title>&lt;[T] as rand::seq::SliceRandom&gt;::shuffle (1,611,304,746 samples, 29.08%)</title><rect x="6.1335%" y="389" width="29.0818%" height="15" fill="rgb(235,36,10)" fg:x="339832347" fg:w="1611304746"/><text x="6.3835%" y="399.50">&lt;[T] as rand::seq::SliceRandom&gt;::shuffle</text></g><g><title>rand::seq::gen_index (1,262,166,833 samples, 22.78%)</title><rect x="12.4350%" y="373" width="22.7804%" height="15" fill="rgb(251,123,47)" fg:x="688970260" fg:w="1262166833"/><text x="12.6850%" y="383.50">rand::seq::gen_index</text></g><g><title>rand::rng::Rng::gen_range (1,262,166,832 samples, 22.78%)</title><rect x="12.4350%" y="357" width="22.7804%" height="15" fill="rgb(221,13,13)" fg:x="688970261" fg:w="1262166832"/><text x="12.6850%" y="367.50">rand::rng::Rng::gen_range</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (1,262,166,832 samples, 22.78%)</title><rect x="12.4350%" y="341" width="22.7804%" height="15" fill="rgb(238,131,9)" fg:x="688970261" fg:w="1262166832"/><text x="12.6850%" y="351.50">&lt;core::ops::range::Range&lt;T&gt; as rand:..</text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;u32&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (1,262,166,832 samples, 22.78%)</title><rect x="12.4350%" y="325" width="22.7804%" height="15" fill="rgb(211,50,8)" fg:x="688970261" fg:w="1262166832"/><text x="12.6850%" y="335.50">&lt;rand::distributions::uniform::Unifo..</text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;u32&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (1,262,166,832 samples, 22.78%)</title><rect x="12.4350%" y="309" width="22.7804%" height="15" fill="rgb(245,182,24)" fg:x="688970261" fg:w="1262166832"/><text x="12.6850%" y="319.50">&lt;rand::distributions::uniform::Unifo..</text></g><g><title>rand::rng::Rng::gen (980,973,781 samples, 17.71%)</title><rect x="17.5101%" y="293" width="17.7052%" height="15" fill="rgb(242,14,37)" fg:x="970163312" fg:w="980973781"/><text x="17.7601%" y="303.50">rand::rng::Rng::gen</text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u32&gt; for rand::distributions::Standard&gt;::sample (980,973,781 samples, 17.71%)</title><rect x="17.5101%" y="277" width="17.7052%" height="15" fill="rgb(246,228,12)" fg:x="970163312" fg:w="980973781"/><text x="17.7601%" y="287.50">rand::distributions::integer..</text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u32 (980,973,781 samples, 17.71%)</title><rect x="17.5101%" y="261" width="17.7052%" height="15" fill="rgb(213,55,15)" fg:x="970163312" fg:w="980973781"/><text x="17.7601%" y="271.50">&lt;rand::rngs::thread::ThreadR..</text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u32 (980,973,781 samples, 17.71%)</title><rect x="17.5101%" y="245" width="17.7052%" height="15" fill="rgb(209,9,3)" fg:x="970163312" fg:w="980973781"/><text x="17.7601%" y="255.50">&lt;rand::rngs::adapter::reseed..</text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (980,973,781 samples, 17.71%)</title><rect x="17.5101%" y="229" width="17.7052%" height="15" fill="rgb(230,59,30)" fg:x="970163312" fg:w="980973781"/><text x="17.7601%" y="239.50">&lt;rand_core::block::BlockRng&lt;..</text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (472,981,965 samples, 8.54%)</title><rect x="26.6786%" y="213" width="8.5367%" height="15" fill="rgb(209,121,21)" fg:x="1478155128" fg:w="472981965"/><text x="26.9286%" y="223.50">rand_core::b..</text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (472,981,965 samples, 8.54%)</title><rect x="26.6786%" y="197" width="8.5367%" height="15" fill="rgb(220,109,13)" fg:x="1478155128" fg:w="472981965"/><text x="26.9286%" y="207.50">&lt;rand::rngs:..</text></g><g><title>rand::rngs::adapter::reseeding::fork::get_fork_counter (35,417,424 samples, 0.64%)</title><rect x="34.5761%" y="181" width="0.6392%" height="15" fill="rgb(232,18,1)" fg:x="1915719669" fg:w="35417424"/><text x="34.8261%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (28,716,490 samples, 0.52%)</title><rect x="34.6970%" y="165" width="0.5183%" height="15" fill="rgb(215,41,42)" fg:x="1922420603" fg:w="28716490"/><text x="34.9470%" y="175.50"></text></g><g><title>core::sync::atomic::atomic_load (28,716,490 samples, 0.52%)</title><rect x="34.6970%" y="149" width="0.5183%" height="15" fill="rgb(224,123,36)" fg:x="1922420603" fg:w="28716490"/><text x="34.9470%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (7,141,189 samples, 0.13%)</title><rect x="35.2153%" y="389" width="0.1289%" height="15" fill="rgb(240,125,3)" fg:x="1951137093" fg:w="7141189"/><text x="35.4653%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (7,141,189 samples, 0.13%)</title><rect x="35.2153%" y="373" width="0.1289%" height="15" fill="rgb(205,98,50)" fg:x="1951137093" fg:w="7141189"/><text x="35.4653%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_slice (7,141,189 samples, 0.13%)</title><rect x="35.2153%" y="357" width="0.1289%" height="15" fill="rgb(205,185,37)" fg:x="1951137093" fg:w="7141189"/><text x="35.4653%" y="367.50"></text></g><g><title>&lt;kleurenwiezen::players::greedy_player::GreedyPlayer as kleurenwiezen::players::Player&gt;::cards (9,085,082 samples, 0.16%)</title><rect x="35.3442%" y="389" width="0.1640%" height="15" fill="rgb(238,207,15)" fg:x="1958278282" fg:w="9085082"/><text x="35.5942%" y="399.50"></text></g><g><title>core::array::from_fn (21,691,053 samples, 0.39%)</title><rect x="35.5082%" y="389" width="0.3915%" height="15" fill="rgb(213,199,42)" fg:x="1967363364" fg:w="21691053"/><text x="35.7582%" y="399.50"></text></g><g><title>kleurenwiezen::card::Cards::from_slice (29,528,890 samples, 0.53%)</title><rect x="35.8997%" y="389" width="0.5330%" height="15" fill="rgb(235,201,11)" fg:x="1989054417" fg:w="29528890"/><text x="36.1497%" y="399.50"></text></g><g><title>&lt;u64 as core::ops::bit::Shl&lt;&amp;u64&gt;&gt;::shl (8,778,437 samples, 0.16%)</title><rect x="36.2742%" y="373" width="0.1584%" height="15" fill="rgb(207,46,11)" fg:x="2009804870" fg:w="8778437"/><text x="36.5242%" y="383.50"></text></g><g><title>&lt;u64 as core::ops::bit::Shl&gt;::shl (5,211,300 samples, 0.09%)</title><rect x="36.3386%" y="357" width="0.0941%" height="15" fill="rgb(241,35,35)" fg:x="2013372007" fg:w="5211300"/><text x="36.5886%" y="367.50"></text></g><g><title>kleurenwiezen::game::Game::deal_cards (1,687,805,940 samples, 30.46%)</title><rect x="6.1014%" y="405" width="30.4625%" height="15" fill="rgb(243,32,47)" fg:x="338055269" fg:w="1687805940"/><text x="6.3514%" y="415.50">kleurenwiezen::game::Game::deal_cards</text></g><g><title>kleurenwiezen::players::Player::set_cards (7,277,902 samples, 0.13%)</title><rect x="36.4326%" y="389" width="0.1314%" height="15" fill="rgb(247,202,23)" fg:x="2018583307" fg:w="7277902"/><text x="36.6826%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (3,614,553 samples, 0.07%)</title><rect x="36.8605%" y="357" width="0.0652%" height="15" fill="rgb(219,102,11)" fg:x="2042290393" fg:w="3614553"/><text x="37.1105%" y="367.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64::_{{closure}} (3,561,793 samples, 0.06%)</title><rect x="37.0862%" y="277" width="0.0643%" height="15" fill="rgb(243,110,44)" fg:x="2054795578" fg:w="3561793"/><text x="37.3362%" y="287.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (3,619,789 samples, 0.07%)</title><rect x="37.1505%" y="149" width="0.0653%" height="15" fill="rgb(222,74,54)" fg:x="2058357371" fg:w="3619789"/><text x="37.4005%" y="159.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (3,619,789 samples, 0.07%)</title><rect x="37.1505%" y="133" width="0.0653%" height="15" fill="rgb(216,99,12)" fg:x="2058357371" fg:w="3619789"/><text x="37.4005%" y="143.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (3,619,789 samples, 0.07%)</title><rect x="37.1505%" y="117" width="0.0653%" height="15" fill="rgb(226,22,26)" fg:x="2058357371" fg:w="3619789"/><text x="37.4005%" y="127.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (3,539,436 samples, 0.06%)</title><rect x="37.2158%" y="149" width="0.0639%" height="15" fill="rgb(217,163,10)" fg:x="2061977160" fg:w="3539436"/><text x="37.4658%" y="159.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (3,539,436 samples, 0.06%)</title><rect x="37.2158%" y="133" width="0.0639%" height="15" fill="rgb(213,25,53)" fg:x="2061977160" fg:w="3539436"/><text x="37.4658%" y="143.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (3,539,436 samples, 0.06%)</title><rect x="37.2158%" y="117" width="0.0639%" height="15" fill="rgb(252,105,26)" fg:x="2061977160" fg:w="3539436"/><text x="37.4658%" y="127.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (5,366,086 samples, 0.10%)</title><rect x="37.2797%" y="149" width="0.0969%" height="15" fill="rgb(220,39,43)" fg:x="2065516596" fg:w="5366086"/><text x="37.5297%" y="159.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (5,366,086 samples, 0.10%)</title><rect x="37.2797%" y="133" width="0.0969%" height="15" fill="rgb(229,68,48)" fg:x="2065516596" fg:w="5366086"/><text x="37.5297%" y="143.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (5,366,086 samples, 0.10%)</title><rect x="37.2797%" y="117" width="0.0969%" height="15" fill="rgb(252,8,32)" fg:x="2065516596" fg:w="5366086"/><text x="37.5297%" y="127.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (16,162,699 samples, 0.29%)</title><rect x="37.1505%" y="245" width="0.2917%" height="15" fill="rgb(223,20,43)" fg:x="2058357371" fg:w="16162699"/><text x="37.4005%" y="255.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (16,162,699 samples, 0.29%)</title><rect x="37.1505%" y="229" width="0.2917%" height="15" fill="rgb(229,81,49)" fg:x="2058357371" fg:w="16162699"/><text x="37.4005%" y="239.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (16,162,699 samples, 0.29%)</title><rect x="37.1505%" y="213" width="0.2917%" height="15" fill="rgb(236,28,36)" fg:x="2058357371" fg:w="16162699"/><text x="37.4005%" y="223.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (16,162,699 samples, 0.29%)</title><rect x="37.1505%" y="197" width="0.2917%" height="15" fill="rgb(249,185,26)" fg:x="2058357371" fg:w="16162699"/><text x="37.4005%" y="207.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (16,162,699 samples, 0.29%)</title><rect x="37.1505%" y="181" width="0.2917%" height="15" fill="rgb(249,174,33)" fg:x="2058357371" fg:w="16162699"/><text x="37.4005%" y="191.50"></text></g><g><title>rand_chacha::guts::round (16,162,699 samples, 0.29%)</title><rect x="37.1505%" y="165" width="0.2917%" height="15" fill="rgb(233,201,37)" fg:x="2058357371" fg:w="16162699"/><text x="37.4005%" y="175.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (3,637,388 samples, 0.07%)</title><rect x="37.3765%" y="149" width="0.0656%" height="15" fill="rgb(221,78,26)" fg:x="2070882682" fg:w="3637388"/><text x="37.6265%" y="159.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (3,637,388 samples, 0.07%)</title><rect x="37.3765%" y="133" width="0.0656%" height="15" fill="rgb(250,127,30)" fg:x="2070882682" fg:w="3637388"/><text x="37.6265%" y="143.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (3,637,388 samples, 0.07%)</title><rect x="37.3765%" y="117" width="0.0656%" height="15" fill="rgb(230,49,44)" fg:x="2070882682" fg:w="3637388"/><text x="37.6265%" y="127.50"></text></g><g><title>kleurenwiezen::game::Game::new (1,803,384,832 samples, 32.55%)</title><rect x="4.9598%" y="421" width="32.5486%" height="15" fill="rgb(229,67,23)" fg:x="274801625" fg:w="1803384832"/><text x="5.2098%" y="431.50">kleurenwiezen::game::Game::new</text></g><g><title>rand::rng::Rng::gen_range (52,325,248 samples, 0.94%)</title><rect x="36.5640%" y="405" width="0.9444%" height="15" fill="rgb(249,83,47)" fg:x="2025861209" fg:w="52325248"/><text x="36.8140%" y="415.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (44,879,201 samples, 0.81%)</title><rect x="36.6984%" y="389" width="0.8100%" height="15" fill="rgb(215,43,3)" fg:x="2033307256" fg:w="44879201"/><text x="36.9484%" y="399.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (44,879,201 samples, 0.81%)</title><rect x="36.6984%" y="373" width="0.8100%" height="15" fill="rgb(238,154,13)" fg:x="2033307256" fg:w="44879201"/><text x="36.9484%" y="383.50"></text></g><g><title>rand::rng::Rng::gen (32,281,511 samples, 0.58%)</title><rect x="36.9257%" y="357" width="0.5826%" height="15" fill="rgb(219,56,2)" fg:x="2045904946" fg:w="32281511"/><text x="37.1757%" y="367.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;usize&gt; for rand::distributions::Standard&gt;::sample (32,281,511 samples, 0.58%)</title><rect x="36.9257%" y="341" width="0.5826%" height="15" fill="rgb(233,0,4)" fg:x="2045904946" fg:w="32281511"/><text x="37.1757%" y="351.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u64 (32,281,511 samples, 0.58%)</title><rect x="36.9257%" y="325" width="0.5826%" height="15" fill="rgb(235,30,7)" fg:x="2045904946" fg:w="32281511"/><text x="37.1757%" y="335.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u64 (32,281,511 samples, 0.58%)</title><rect x="36.9257%" y="309" width="0.5826%" height="15" fill="rgb(250,79,13)" fg:x="2045904946" fg:w="32281511"/><text x="37.1757%" y="319.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (32,281,511 samples, 0.58%)</title><rect x="36.9257%" y="293" width="0.5826%" height="15" fill="rgb(211,146,34)" fg:x="2045904946" fg:w="32281511"/><text x="37.1757%" y="303.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (19,829,086 samples, 0.36%)</title><rect x="37.1505%" y="277" width="0.3579%" height="15" fill="rgb(228,22,38)" fg:x="2058357371" fg:w="19829086"/><text x="37.4005%" y="287.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (19,829,086 samples, 0.36%)</title><rect x="37.1505%" y="261" width="0.3579%" height="15" fill="rgb(235,168,5)" fg:x="2058357371" fg:w="19829086"/><text x="37.4005%" y="271.50"></text></g><g><title>rand::rngs::adapter::reseeding::fork::get_fork_counter (3,666,387 samples, 0.07%)</title><rect x="37.4422%" y="245" width="0.0662%" height="15" fill="rgb(221,155,16)" fg:x="2074520070" fg:w="3666387"/><text x="37.6922%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (3,666,387 samples, 0.07%)</title><rect x="37.4422%" y="229" width="0.0662%" height="15" fill="rgb(215,215,53)" fg:x="2074520070" fg:w="3666387"/><text x="37.6922%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_load (3,666,387 samples, 0.07%)</title><rect x="37.4422%" y="213" width="0.0662%" height="15" fill="rgb(223,4,10)" fg:x="2074520070" fg:w="3666387"/><text x="37.6922%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (29,435,597 samples, 0.53%)</title><rect x="40.7685%" y="405" width="0.5313%" height="15" fill="rgb(234,103,6)" fg:x="2258817350" fg:w="29435597"/><text x="41.0185%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (29,435,597 samples, 0.53%)</title><rect x="40.7685%" y="389" width="0.5313%" height="15" fill="rgb(227,97,0)" fg:x="2258817350" fg:w="29435597"/><text x="41.0185%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (29,435,597 samples, 0.53%)</title><rect x="40.7685%" y="373" width="0.5313%" height="15" fill="rgb(234,150,53)" fg:x="2258817350" fg:w="29435597"/><text x="41.0185%" y="383.50"></text></g><g><title>&lt;kleurenwiezen::card::Cards as core::ops::bit::BitOrAssign&lt;u64&gt;&gt;::bitor_assign (16,817,746 samples, 0.30%)</title><rect x="41.2998%" y="405" width="0.3035%" height="15" fill="rgb(228,201,54)" fg:x="2288252947" fg:w="16817746"/><text x="41.5498%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (58,764,606 samples, 1.06%)</title><rect x="64.0249%" y="389" width="1.0606%" height="15" fill="rgb(222,22,37)" fg:x="3547362003" fg:w="58764606"/><text x="64.2749%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (58,764,606 samples, 1.06%)</title><rect x="64.0249%" y="373" width="1.0606%" height="15" fill="rgb(237,53,32)" fg:x="3547362003" fg:w="58764606"/><text x="64.2749%" y="383.50"></text></g><g><title>kleurenwiezen::card::Card::set_player (16,841,893 samples, 0.30%)</title><rect x="65.0856%" y="389" width="0.3040%" height="15" fill="rgb(233,25,53)" fg:x="3606126609" fg:w="16841893"/><text x="65.3356%" y="399.50"></text></g><g><title>kleurenwiezen::card::Card::value (37,657,859 samples, 0.68%)</title><rect x="65.3895%" y="389" width="0.6797%" height="15" fill="rgb(210,40,34)" fg:x="3622968502" fg:w="37657859"/><text x="65.6395%" y="399.50"></text></g><g><title>kleurenwiezen::card::Cards::highest (29,392,720 samples, 0.53%)</title><rect x="66.0692%" y="389" width="0.5305%" height="15" fill="rgb(241,220,44)" fg:x="3660626361" fg:w="29392720"/><text x="66.3192%" y="399.50"></text></g><g><title>kleurenwiezen::bits::msb (12,639,501 samples, 0.23%)</title><rect x="70.6203%" y="373" width="0.2281%" height="15" fill="rgb(235,28,35)" fg:x="3912787019" fg:w="12639501"/><text x="70.8703%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (12,639,501 samples, 0.23%)</title><rect x="70.6203%" y="357" width="0.2281%" height="15" fill="rgb(210,56,17)" fg:x="3912787019" fg:w="12639501"/><text x="70.8703%" y="367.50"></text></g><g><title>kleurenwiezen::card::Card::new (289,046,783 samples, 5.22%)</title><rect x="70.8485%" y="373" width="5.2169%" height="15" fill="rgb(224,130,29)" fg:x="3925426520" fg:w="289046783"/><text x="71.0985%" y="383.50">kleure..</text></g><g><title>kleurenwiezen::card::Cards::highest_of_suite (579,147,439 samples, 10.45%)</title><rect x="66.5997%" y="389" width="10.4528%" height="15" fill="rgb(235,212,8)" fg:x="3690019081" fg:w="579147439"/><text x="66.8497%" y="399.50">kleurenwiezen::..</text></g><g><title>kleurenwiezen::card::Suite::mask (54,693,217 samples, 0.99%)</title><rect x="76.0654%" y="373" width="0.9871%" height="15" fill="rgb(223,33,50)" fg:x="4214473303" fg:w="54693217"/><text x="76.3154%" y="383.50"></text></g><g><title>kleurenwiezen::card::Cards::lowest (272,700,597 samples, 4.92%)</title><rect x="77.0525%" y="389" width="4.9219%" height="15" fill="rgb(219,149,13)" fg:x="4269166520" fg:w="272700597"/><text x="77.3025%" y="399.50">kleure..</text></g><g><title>&lt;kleurenwiezen::players::greedy_player::GreedyPlayer as kleurenwiezen::players::Player&gt;::decide (2,245,182,858 samples, 40.52%)</title><rect x="41.6033%" y="405" width="40.5224%" height="15" fill="rgb(250,156,29)" fg:x="2305070693" fg:w="2245182858"/><text x="41.8533%" y="415.50">&lt;kleurenwiezen::players::greedy_player::GreedyPlayer as kleurenwie..</text></g><g><title>kleurenwiezen::trick::Trick::suite (8,386,434 samples, 0.15%)</title><rect x="81.9744%" y="389" width="0.1514%" height="15" fill="rgb(216,193,19)" fg:x="4541867117" fg:w="8386434"/><text x="82.2244%" y="399.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (12,590,420 samples, 0.23%)</title><rect x="82.1257%" y="405" width="0.2272%" height="15" fill="rgb(216,135,14)" fg:x="4550253551" fg:w="12590420"/><text x="82.3757%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (12,590,420 samples, 0.23%)</title><rect x="82.1257%" y="389" width="0.2272%" height="15" fill="rgb(241,47,5)" fg:x="4550253551" fg:w="12590420"/><text x="82.3757%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (12,590,420 samples, 0.23%)</title><rect x="82.1257%" y="373" width="0.2272%" height="15" fill="rgb(233,42,35)" fg:x="4550253551" fg:w="12590420"/><text x="82.3757%" y="383.50"></text></g><g><title>kleurenwiezen::card::Card::suite (46,165,607 samples, 0.83%)</title><rect x="85.6879%" y="389" width="0.8332%" height="15" fill="rgb(231,13,6)" fg:x="4747620046" fg:w="46165607"/><text x="85.9379%" y="399.50"></text></g><g><title>kleurenwiezen::card::Card::get_index (251,955,570 samples, 4.55%)</title><rect x="82.3530%" y="405" width="4.5474%" height="15" fill="rgb(207,181,40)" fg:x="4562843971" fg:w="251955570"/><text x="82.6030%" y="415.50">kleur..</text></g><g><title>kleurenwiezen::card::Card::value (21,013,888 samples, 0.38%)</title><rect x="86.5211%" y="389" width="0.3793%" height="15" fill="rgb(254,173,49)" fg:x="4793785653" fg:w="21013888"/><text x="86.7711%" y="399.50"></text></g><g><title>kleurenwiezen::players::Player::toggle_card (96,610,103 samples, 1.74%)</title><rect x="86.9004%" y="405" width="1.7437%" height="15" fill="rgb(221,1,38)" fg:x="4814799541" fg:w="96610103"/><text x="87.1504%" y="415.50"></text></g><g><title>kleurenwiezen::trick::Trick::clear (12,595,368 samples, 0.23%)</title><rect x="88.6441%" y="405" width="0.2273%" height="15" fill="rgb(206,124,46)" fg:x="4911409644" fg:w="12595368"/><text x="88.8941%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (25,191,153 samples, 0.45%)</title><rect x="90.5393%" y="389" width="0.4547%" height="15" fill="rgb(249,21,11)" fg:x="5016416511" fg:w="25191153"/><text x="90.7893%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (25,191,153 samples, 0.45%)</title><rect x="90.5393%" y="373" width="0.4547%" height="15" fill="rgb(222,201,40)" fg:x="5016416511" fg:w="25191153"/><text x="90.7893%" y="383.50"></text></g><g><title>kleurenwiezen::array::Array&lt;T,_&gt;::push (168,081,148 samples, 3.03%)</title><rect x="90.9940%" y="389" width="3.0336%" height="15" fill="rgb(235,61,29)" fg:x="5041607664" fg:w="168081148"/><text x="91.2440%" y="399.50">kle..</text></g><g><title>kleurenwiezen::card::Card::suite (70,848,847 samples, 1.28%)</title><rect x="94.0276%" y="389" width="1.2787%" height="15" fill="rgb(219,207,3)" fg:x="5209688812" fg:w="70848847"/><text x="94.2776%" y="399.50"></text></g><g><title>kleurenwiezen::trick::Trick::play (373,291,197 samples, 6.74%)</title><rect x="88.8714%" y="405" width="6.7374%" height="15" fill="rgb(222,56,46)" fg:x="4924005012" fg:w="373291197"/><text x="89.1214%" y="415.50">kleurenwi..</text></g><g><title>kleurenwiezen::card::Card::value (16,758,550 samples, 0.30%)</title><rect x="95.3063%" y="389" width="0.3025%" height="15" fill="rgb(239,76,54)" fg:x="5280537659" fg:w="16758550"/><text x="95.5563%" y="399.50"></text></g><g><title>kleurenwiezen::game::Game::play_trick (3,231,749,057 samples, 58.33%)</title><rect x="37.5084%" y="421" width="58.3286%" height="15" fill="rgb(231,124,27)" fg:x="2078186457" fg:w="3231749057"/><text x="37.7584%" y="431.50">kleurenwiezen::game::Game::play_trick</text></g><g><title>kleurenwiezen::trick::Trick::winner (12,639,305 samples, 0.23%)</title><rect x="95.6088%" y="405" width="0.2281%" height="15" fill="rgb(249,195,6)" fg:x="5297296209" fg:w="12639305"/><text x="95.8588%" y="415.50"></text></g><g><title>[libc.so.6] (10,595,040 samples, 0.19%)</title><rect x="99.2861%" y="293" width="0.1912%" height="15" fill="rgb(237,174,47)" fg:x="5501041584" fg:w="10595040"/><text x="99.5361%" y="303.50"></text></g><g><title>all (5,540,594,300 samples, 100%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(206,201,31)" fg:x="0" fg:w="5540594300"/><text x="0.2500%" y="751.50"></text></g><g><title>kleurenwiezen (5,540,594,300 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(231,57,52)" fg:x="0" fg:w="5540594300"/><text x="0.2500%" y="735.50">kleurenwiezen</text></g><g><title>_start (5,540,022,885 samples, 99.99%)</title><rect x="0.0103%" y="709" width="99.9897%" height="15" fill="rgb(248,177,22)" fg:x="571415" fg:w="5540022885"/><text x="0.2603%" y="719.50">_start</text></g><g><title>__libc_start_main (5,540,022,885 samples, 99.99%)</title><rect x="0.0103%" y="693" width="99.9897%" height="15" fill="rgb(215,211,37)" fg:x="571415" fg:w="5540022885"/><text x="0.2603%" y="703.50">__libc_start_main</text></g><g><title>[libc.so.6] (5,540,022,885 samples, 99.99%)</title><rect x="0.0103%" y="677" width="99.9897%" height="15" fill="rgb(241,128,51)" fg:x="571415" fg:w="5540022885"/><text x="0.2603%" y="687.50">[libc.so.6]</text></g><g><title>main (5,540,022,885 samples, 99.99%)</title><rect x="0.0103%" y="661" width="99.9897%" height="15" fill="rgb(227,165,31)" fg:x="571415" fg:w="5540022885"/><text x="0.2603%" y="671.50">main</text></g><g><title>std::rt::lang_start_internal (5,540,022,885 samples, 99.99%)</title><rect x="0.0103%" y="645" width="99.9897%" height="15" fill="rgb(228,167,24)" fg:x="571415" fg:w="5540022885"/><text x="0.2603%" y="655.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (5,540,022,885 samples, 99.99%)</title><rect x="0.0103%" y="629" width="99.9897%" height="15" fill="rgb(228,143,12)" fg:x="571415" fg:w="5540022885"/><text x="0.2603%" y="639.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (5,540,022,885 samples, 99.99%)</title><rect x="0.0103%" y="613" width="99.9897%" height="15" fill="rgb(249,149,8)" fg:x="571415" fg:w="5540022885"/><text x="0.2603%" y="623.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (5,540,022,885 samples, 99.99%)</title><rect x="0.0103%" y="597" width="99.9897%" height="15" fill="rgb(243,35,44)" fg:x="571415" fg:w="5540022885"/><text x="0.2603%" y="607.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (5,540,022,885 samples, 99.99%)</title><rect x="0.0103%" y="581" width="99.9897%" height="15" fill="rgb(246,89,9)" fg:x="571415" fg:w="5540022885"/><text x="0.2603%" y="591.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (5,540,022,885 samples, 99.99%)</title><rect x="0.0103%" y="565" width="99.9897%" height="15" fill="rgb(233,213,13)" fg:x="571415" fg:w="5540022885"/><text x="0.2603%" y="575.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (5,540,022,885 samples, 99.99%)</title><rect x="0.0103%" y="549" width="99.9897%" height="15" fill="rgb(233,141,41)" fg:x="571415" fg:w="5540022885"/><text x="0.2603%" y="559.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (5,540,022,885 samples, 99.99%)</title><rect x="0.0103%" y="533" width="99.9897%" height="15" fill="rgb(239,167,4)" fg:x="571415" fg:w="5540022885"/><text x="0.2603%" y="543.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (5,540,022,885 samples, 99.99%)</title><rect x="0.0103%" y="517" width="99.9897%" height="15" fill="rgb(209,217,16)" fg:x="571415" fg:w="5540022885"/><text x="0.2603%" y="527.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (5,540,022,885 samples, 99.99%)</title><rect x="0.0103%" y="501" width="99.9897%" height="15" fill="rgb(219,88,35)" fg:x="571415" fg:w="5540022885"/><text x="0.2603%" y="511.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (5,540,022,885 samples, 99.99%)</title><rect x="0.0103%" y="485" width="99.9897%" height="15" fill="rgb(220,193,23)" fg:x="571415" fg:w="5540022885"/><text x="0.2603%" y="495.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (5,540,022,885 samples, 99.99%)</title><rect x="0.0103%" y="469" width="99.9897%" height="15" fill="rgb(230,90,52)" fg:x="571415" fg:w="5540022885"/><text x="0.2603%" y="479.50">core::ops::function::FnOnce::call_once</text></g><g><title>kleurenwiezen::main (5,540,022,885 samples, 99.99%)</title><rect x="0.0103%" y="453" width="99.9897%" height="15" fill="rgb(252,106,19)" fg:x="571415" fg:w="5540022885"/><text x="0.2603%" y="463.50">kleurenwiezen::main</text></g><g><title>kleurenwiezen::bench::bench (5,540,022,885 samples, 99.99%)</title><rect x="0.0103%" y="437" width="99.9897%" height="15" fill="rgb(206,74,20)" fg:x="571415" fg:w="5540022885"/><text x="0.2603%" y="447.50">kleurenwiezen::bench::bench</text></g><g><title>kleurenwiezen::players::Player::boxed (230,658,786 samples, 4.16%)</title><rect x="95.8369%" y="421" width="4.1631%" height="15" fill="rgb(230,138,44)" fg:x="5309935514" fg:w="230658786"/><text x="96.0869%" y="431.50">kleur..</text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (230,658,786 samples, 4.16%)</title><rect x="95.8369%" y="405" width="4.1631%" height="15" fill="rgb(235,182,43)" fg:x="5309935514" fg:w="230658786"/><text x="96.0869%" y="415.50">alloc..</text></g><g><title>alloc::alloc::exchange_malloc (230,658,786 samples, 4.16%)</title><rect x="95.8369%" y="389" width="4.1631%" height="15" fill="rgb(242,16,51)" fg:x="5309935514" fg:w="230658786"/><text x="96.0869%" y="399.50">alloc..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (225,220,103 samples, 4.06%)</title><rect x="95.9351%" y="373" width="4.0649%" height="15" fill="rgb(248,9,4)" fg:x="5315374197" fg:w="225220103"/><text x="96.1851%" y="383.50">&lt;all..</text></g><g><title>alloc::alloc::Global::alloc_impl (225,220,103 samples, 4.06%)</title><rect x="95.9351%" y="357" width="4.0649%" height="15" fill="rgb(210,31,22)" fg:x="5315374197" fg:w="225220103"/><text x="96.1851%" y="367.50">allo..</text></g><g><title>alloc::alloc::alloc (225,220,103 samples, 4.06%)</title><rect x="95.9351%" y="341" width="4.0649%" height="15" fill="rgb(239,54,39)" fg:x="5315374197" fg:w="225220103"/><text x="96.1851%" y="351.50">allo..</text></g><g><title>malloc (225,220,103 samples, 4.06%)</title><rect x="95.9351%" y="325" width="4.0649%" height="15" fill="rgb(230,99,41)" fg:x="5315374197" fg:w="225220103"/><text x="96.1851%" y="335.50">mall..</text></g><g><title>[libc.so.6] (178,359,283 samples, 3.22%)</title><rect x="96.7809%" y="309" width="3.2191%" height="15" fill="rgb(253,106,12)" fg:x="5362235017" fg:w="178359283"/><text x="97.0309%" y="319.50">[li..</text></g><g><title>[unknown] (28,957,676 samples, 0.52%)</title><rect x="99.4774%" y="293" width="0.5226%" height="15" fill="rgb(213,46,41)" fg:x="5511636624" fg:w="28957676"/><text x="99.7274%" y="303.50"></text></g><g><title>[unknown] (18,056,694 samples, 0.33%)</title><rect x="99.6741%" y="277" width="0.3259%" height="15" fill="rgb(215,133,35)" fg:x="5522537606" fg:w="18056694"/><text x="99.9241%" y="287.50"></text></g><g><title>[unknown] (14,413,266 samples, 0.26%)</title><rect x="99.7399%" y="261" width="0.2601%" height="15" fill="rgb(213,28,5)" fg:x="5526181034" fg:w="14413266"/><text x="99.9899%" y="271.50"></text></g><g><title>[unknown] (10,739,021 samples, 0.19%)</title><rect x="99.8062%" y="245" width="0.1938%" height="15" fill="rgb(215,77,49)" fg:x="5529855279" fg:w="10739021"/><text x="100.0562%" y="255.50"></text></g><g><title>[unknown] (7,184,590 samples, 0.13%)</title><rect x="99.8703%" y="229" width="0.1297%" height="15" fill="rgb(248,100,22)" fg:x="5533409710" fg:w="7184590"/><text x="100.1203%" y="239.50"></text></g><g><title>[unknown] (7,184,590 samples, 0.13%)</title><rect x="99.8703%" y="213" width="0.1297%" height="15" fill="rgb(208,67,9)" fg:x="5533409710" fg:w="7184590"/><text x="100.1203%" y="223.50"></text></g><g><title>[unknown] (3,551,937 samples, 0.06%)</title><rect x="99.9359%" y="197" width="0.0641%" height="15" fill="rgb(219,133,21)" fg:x="5537042363" fg:w="3551937"/><text x="100.1859%" y="207.50"></text></g></svg></svg>